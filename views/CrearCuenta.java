/*******************************************************************************
 *                                                                             *
 * Práctica Hotel                                                              *
 * Autor: Valle Guerra, Victor Leonardo                                        *
 * Proyecto: Hotel                                                             *
 * [Major].[Minor].[Revision].[Build]                                          *
 * Versión : 1.0.0.0 (dev_release20210605_build_0)                             *
 * Nombre de Archivo: CrearCuenta.java                                         *
 * Fecha: 06/Jun/2021                                                          *
 * Materia: Seminario de solución de Problemas de Estructura de Datos II       *
 * NRC: 138619                                                                 *      
 * CVE: I5889                                                                  *
 * Sección: D21                                                                *
 * Profesor: Lupercio Coronel, Ramiro                                          *
 * Centro Universitario de Ciencias Exactas e Ingenierías                      *
 *                                                                             *
 ******************************************************************************/

// Paquete donde se incluye dicho archivo
package views;

// Paquetes a user en esta clase
import controllers.Hashing;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import models.Ventana;
import models.Registro;
import models.Usuario;

// Parámetros que indican autor(es) de programa
/**
 * @author Valle Guerra, Victor Leonardo 
 */
// Clase principal de Archivo que se extiende desde JDialog
public class CrearCuenta extends javax.swing.JDialog {

    /**
     * Parámetros a usar en clase
     * @param TamanoVentanaAAsignar
     * @param Registros
     */
    // |------------------------Atributos privados-----------------------------|
    private Ventana TamanoVentana;
    private Registro RegistrosVentana;
    private String ContrasenaTemp;
    private Boolean MostrandoContrasena;
    
    // |------------------------Métodos privados-------------------------------|
   
    // |------------------------Atributos públicos-----------------------------|
    
    // |------------------------Métodos públicos-------------------------------|
    
    // Constructor de clase
    public CrearCuenta(java.awt.Frame parent, boolean modal, 
            Ventana TamanoVentanaAAsignar, Registro Registros) {
        super(parent, modal);
        // Colar imagen de icono de programa
        ImageIcon Icono = new ImageIcon(getClass().getResource(
            "/content/images/logo/CARS-Logo-IcosahedronTransparenteSinTexto.png"));
        setIconImage(Icono.getImage());
        initComponents();
        // Pasar argumentos de constructor a atributos
        TamanoVentana = TamanoVentanaAAsignar;
        RegistrosVentana = Registros;
        MostrandoContrasena = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelFondo = new javax.swing.JPanel();
        BotonCerrar = new javax.swing.JButton();
        TextoCrearCuentaNueva = new javax.swing.JLabel();
        TextoNombreUsuario = new javax.swing.JLabel();
        CampoNombreUsuario = new javax.swing.JTextField();
        SeparadorNombreUsuario = new javax.swing.JSeparator();
        TextoContrasena = new javax.swing.JLabel();
        CampoContrasena = new javax.swing.JTextField();
        SeparadorContrasena = new javax.swing.JSeparator();
        TextoNombre = new javax.swing.JLabel();
        CampoNombre = new javax.swing.JTextField();
        SeparadorNombre = new javax.swing.JSeparator();
        TextoApellidoPaterno = new javax.swing.JLabel();
        CampoApellidoPaterno = new javax.swing.JTextField();
        SeparadorApellidoPaterno = new javax.swing.JSeparator();
        TextoApellidoMaterno = new javax.swing.JLabel();
        CampoApellidoMaterno = new javax.swing.JTextField();
        SeparadorApellidoMaterno = new javax.swing.JSeparator();
        CampoDireccion = new javax.swing.JTextField();
        SeparadorDireccion = new javax.swing.JSeparator();
        TextoDireccion = new javax.swing.JLabel();
        CampoTelefono = new javax.swing.JTextField();
        SeparadorTelefono = new javax.swing.JSeparator();
        TextoTelefono = new javax.swing.JLabel();
        BotonMostrarContrasena = new javax.swing.JButton();
        BotonReestablecer = new javax.swing.JButton();
        BotonRegistrarse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear cuenta en CARS");
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        PanelFondo.setBackground(new java.awt.Color(255, 255, 255));

        BotonCerrar.setBackground(new java.awt.Color(255, 255, 255));
        BotonCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/options/BotonCerrarNormal-MistyBlue-24x24.png"))); // NOI18N
        BotonCerrar.setToolTipText("<html><p><strong>Cerrar ventana</strong></p></html>");
        BotonCerrar.setBorder(null);
        BotonCerrar.setBorderPainted(false);
        BotonCerrar.setContentAreaFilled(false);
        BotonCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCerrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCerrar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/options/BotonCerrarClicked-MistyBlue-24x24.png"))); // NOI18N
        BotonCerrar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/options/BotonCerrarOver-MistyBlue-24x24.png"))); // NOI18N
        BotonCerrar.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/options/BotonCerrarOver-MistyBlue-24x24.png"))); // NOI18N
        BotonCerrar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/options/BotonCerrarOver-MistyBlue-24x24.png"))); // NOI18N
        BotonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCerrarActionPerformed(evt);
            }
        });

        TextoCrearCuentaNueva.setText("Crear una nueva cuenta");

        TextoNombreUsuario.setBackground(new java.awt.Color(255, 255, 255));
        TextoNombreUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/NombreUsuario-BelizeHope-24x24.png"))); // NOI18N
        TextoNombreUsuario.setText("Nombre de Usuario:");

        CampoNombreUsuario.setForeground(new java.awt.Color(102, 102, 102));
        CampoNombreUsuario.setText("Nombre de Usuario");
        CampoNombreUsuario.setToolTipText("<html><p><strong>Ingrese nombre de usuario</strong></p></html>");
        CampoNombreUsuario.setBorder(null);
        CampoNombreUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoNombreUsuarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoNombreUsuarioFocusLost(evt);
            }
        });
        CampoNombreUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoNombreUsuarioMousePressed(evt);
            }
        });
        CampoNombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoNombreUsuarioActionPerformed(evt);
            }
        });

        SeparadorNombreUsuario.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorNombreUsuario.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorNombreUsuario.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoContrasena.setBackground(new java.awt.Color(255, 255, 255));
        TextoContrasena.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Contrasena-24x24.png"))); // NOI18N
        TextoContrasena.setText("Contraseña:");

        CampoContrasena.setForeground(new java.awt.Color(102, 102, 102));
        CampoContrasena.setText("Contraseña");
        CampoContrasena.setToolTipText("<html><p><strong>Ingrese contraseña</strong></p></html>");
        CampoContrasena.setBorder(null);
        CampoContrasena.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoContrasenaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoContrasenaFocusLost(evt);
            }
        });
        CampoContrasena.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoContrasenaMousePressed(evt);
            }
        });
        CampoContrasena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoContrasenaActionPerformed(evt);
            }
        });
        CampoContrasena.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CampoContrasenaKeyTyped(evt);
            }
        });

        SeparadorContrasena.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorContrasena.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorContrasena.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoNombre.setBackground(new java.awt.Color(255, 255, 255));
        TextoNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Nombre-BelizeHope-24x24.png"))); // NOI18N
        TextoNombre.setText("Nombre(s):");

        CampoNombre.setForeground(new java.awt.Color(102, 102, 102));
        CampoNombre.setText("Nombre(s)");
        CampoNombre.setToolTipText("<html><p><strong>Ingrese nombre(s)</strong></p></html>");
        CampoNombre.setBorder(null);
        CampoNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoNombreFocusLost(evt);
            }
        });
        CampoNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoNombreMousePressed(evt);
            }
        });
        CampoNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoNombreActionPerformed(evt);
            }
        });

        SeparadorNombre.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorNombre.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorNombre.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoApellidoPaterno.setBackground(new java.awt.Color(255, 255, 255));
        TextoApellidoPaterno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Nombre-BelizeHope-24x24.png"))); // NOI18N
        TextoApellidoPaterno.setText("Apellido Paterno:");

        CampoApellidoPaterno.setForeground(new java.awt.Color(102, 102, 102));
        CampoApellidoPaterno.setText("Apellido Paterno");
        CampoApellidoPaterno.setToolTipText("<html><p><strong>Ingrese apellido paterno</strong></p></html>");
        CampoApellidoPaterno.setBorder(null);
        CampoApellidoPaterno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoApellidoPaternoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoApellidoPaternoFocusLost(evt);
            }
        });
        CampoApellidoPaterno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoApellidoPaternoMousePressed(evt);
            }
        });
        CampoApellidoPaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoApellidoPaternoActionPerformed(evt);
            }
        });

        SeparadorApellidoPaterno.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorApellidoPaterno.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorApellidoPaterno.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoApellidoMaterno.setBackground(new java.awt.Color(255, 255, 255));
        TextoApellidoMaterno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Nombre-BelizeHope-24x24.png"))); // NOI18N
        TextoApellidoMaterno.setText("Apellido Materno:");

        CampoApellidoMaterno.setForeground(new java.awt.Color(102, 102, 102));
        CampoApellidoMaterno.setText("Apellido Materno");
        CampoApellidoMaterno.setToolTipText("<html><p><strong>Ingrese apellido materno</strong></p></html>");
        CampoApellidoMaterno.setBorder(null);
        CampoApellidoMaterno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoApellidoMaternoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoApellidoMaternoFocusLost(evt);
            }
        });
        CampoApellidoMaterno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoApellidoMaternoMousePressed(evt);
            }
        });
        CampoApellidoMaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoApellidoMaternoActionPerformed(evt);
            }
        });

        SeparadorApellidoMaterno.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorApellidoMaterno.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorApellidoMaterno.setPreferredSize(new java.awt.Dimension(50, 15));

        CampoDireccion.setForeground(new java.awt.Color(102, 102, 102));
        CampoDireccion.setText("Dirección");
        CampoDireccion.setToolTipText("<html><p><strong>Ingrese dirección o domicilio</strong></p></html>");
        CampoDireccion.setBorder(null);
        CampoDireccion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoDireccionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoDireccionFocusLost(evt);
            }
        });
        CampoDireccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoDireccionMousePressed(evt);
            }
        });
        CampoDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoDireccionActionPerformed(evt);
            }
        });

        SeparadorDireccion.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorDireccion.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorDireccion.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoDireccion.setBackground(new java.awt.Color(255, 255, 255));
        TextoDireccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Direccion-BelizeHope-24x24.png"))); // NOI18N
        TextoDireccion.setText("Dirección:");

        CampoTelefono.setForeground(new java.awt.Color(102, 102, 102));
        CampoTelefono.setText("Teléfono");
        CampoTelefono.setToolTipText("<html><p><strong>Ingrese número telefónico</strong></p></html>");
        CampoTelefono.setBorder(null);
        CampoTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CampoTelefonoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CampoTelefonoFocusLost(evt);
            }
        });
        CampoTelefono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CampoTelefonoMousePressed(evt);
            }
        });
        CampoTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CampoTelefonoActionPerformed(evt);
            }
        });

        SeparadorTelefono.setForeground(new java.awt.Color(51, 51, 51));
        SeparadorTelefono.setMinimumSize(new java.awt.Dimension(50, 15));
        SeparadorTelefono.setPreferredSize(new java.awt.Dimension(50, 15));

        TextoTelefono.setBackground(new java.awt.Color(255, 255, 255));
        TextoTelefono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/signup/Telefono-BelizeHope-24x24.png"))); // NOI18N
        TextoTelefono.setText("Teléfono:");

        BotonMostrarContrasena.setBackground(new java.awt.Color(255, 255, 255));
        BotonMostrarContrasena.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/login/MostrarContrasenaTextField-BelizeHole-24x24.png"))); // NOI18N
        BotonMostrarContrasena.setToolTipText("<html><p><strong>Mostrar contraseña</strong></p></html>");
        BotonMostrarContrasena.setBorder(null);
        BotonMostrarContrasena.setBorderPainted(false);
        BotonMostrarContrasena.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonMostrarContrasena.setFocusPainted(false);
        BotonMostrarContrasena.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/login/MostrarContrasenaTextFieldClicked-BelizHole-24x24.png"))); // NOI18N
        BotonMostrarContrasena.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/login/MostrarContrasenaTextFieldOver-BelizHole-24x24.png"))); // NOI18N
        BotonMostrarContrasena.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/login/MostrarContrasenaTextFieldOver-BelizHole-24x24.png"))); // NOI18N
        BotonMostrarContrasena.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/content/images/login/MostrarContrasenaTextFieldOver-BelizHole-24x24.png"))); // NOI18N
        BotonMostrarContrasena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMostrarContrasenaActionPerformed(evt);
            }
        });

        BotonReestablecer.setBackground(new java.awt.Color(41, 128, 185));
        BotonReestablecer.setForeground(new java.awt.Color(255, 255, 255));
        BotonReestablecer.setText("Reestablecer");
        BotonReestablecer.setToolTipText("<html><p><strong>Iniciar sesión</strong></p></hmtl>");
        BotonReestablecer.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        BotonReestablecer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonReestablecer.setFocusPainted(false);
        BotonReestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonReestablecerActionPerformed(evt);
            }
        });

        BotonRegistrarse.setBackground(new java.awt.Color(41, 128, 185));
        BotonRegistrarse.setForeground(new java.awt.Color(255, 255, 255));
        BotonRegistrarse.setText("Registrarse");
        BotonRegistrarse.setToolTipText("<html><p><strong>Iniciar sesión</strong></p></hmtl>");
        BotonRegistrarse.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        BotonRegistrarse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonRegistrarse.setFocusPainted(false);
        BotonRegistrarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRegistrarseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelFondoLayout = new javax.swing.GroupLayout(PanelFondo);
        PanelFondo.setLayout(PanelFondoLayout);
        PanelFondoLayout.setHorizontalGroup(
            PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFondoLayout.createSequentialGroup()
                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelFondoLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BotonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelFondoLayout.createSequentialGroup()
                        .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelFondoLayout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(TextoCrearCuentaNueva))
                            .addGroup(PanelFondoLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TextoDireccion)
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TextoContrasena)
                                            .addComponent(TextoNombreUsuario)
                                            .addComponent(TextoNombre)
                                            .addComponent(TextoApellidoPaterno))
                                        .addGroup(PanelFondoLayout.createSequentialGroup()
                                            .addComponent(TextoApellidoMaterno)
                                            .addGap(16, 16, 16)))
                                    .addComponent(TextoTelefono))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(CampoNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SeparadorNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CampoContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SeparadorContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(SeparadorTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CampoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(SeparadorDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CampoDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(SeparadorApellidoMaterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CampoApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(SeparadorApellidoPaterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CampoApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(CampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SeparadorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(BotonMostrarContrasena)))
                        .addGap(0, 67, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(PanelFondoLayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(BotonRegistrarse, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(BotonReestablecer, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelFondoLayout.setVerticalGroup(
            PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFondoLayout.createSequentialGroup()
                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelFondoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BotonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(TextoCrearCuentaNueva)
                        .addGap(35, 35, 35)
                        .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextoNombreUsuario)
                            .addComponent(CampoNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(TextoContrasena)
                        .addGap(18, 18, 18)
                        .addComponent(TextoNombre)
                        .addGap(21, 21, 21)
                        .addComponent(TextoApellidoPaterno)
                        .addGap(22, 22, 22)
                        .addComponent(TextoApellidoMaterno)
                        .addGap(22, 22, 22)
                        .addComponent(TextoDireccion)
                        .addGap(22, 22, 22)
                        .addComponent(TextoTelefono))
                    .addGroup(PanelFondoLayout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CampoContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonMostrarContrasena))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorContrasena, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(CampoApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CampoApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CampoDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CampoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeparadorTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(PanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonReestablecer)
                    .addComponent(BotonRegistrarse))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        getContentPane().add(PanelFondo);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCerrarActionPerformed
        // Cierra ventana cuando es clickeado el botón de cerrar ventana
        System.out.println("Saliendo de ventana " + getTitle());
        Login LoginVentana = new Login(TamanoVentana, RegistrosVentana);
        LoginVentana.setVisible(true);
        dispose();
    }//GEN-LAST:event_BotonCerrarActionPerformed

    private void CampoNombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoNombreUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoNombreUsuarioActionPerformed

    private void CampoContrasenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoContrasenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoContrasenaActionPerformed

    private void CampoNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoNombreActionPerformed

    private void CampoApellidoPaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoApellidoPaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoApellidoPaternoActionPerformed

    private void CampoApellidoMaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoApellidoMaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoApellidoMaternoActionPerformed

    private void CampoDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoDireccionActionPerformed

    private void CampoTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CampoTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CampoTelefonoActionPerformed
    
    // Método para cubrir contraseña
    private void CampoContrasenaCubrirContrasena()
    {
        // Obtiene contenido actual de Contraseña
        String Contenido = this.CampoContrasena.getText();
        String ContenidoReemplazar;
        ContenidoReemplazar = "";      
        // Contador
        int x;
        for(x = 0; x < Contenido.length(); x++)
        {
            ContenidoReemplazar += "•";
        }
        if(!Contenido.equals("Contraseña"))
        {
            this.CampoContrasena.setText(ContenidoReemplazar);
        }
    }
    
    // Método para cuando se da click en BotonMostrarContrasena
    private void BotonMostrarContrasenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMostrarContrasenaActionPerformed
        if(MostrandoContrasena)
        {
            CampoContrasenaCubrirContrasena();
            MostrandoContrasena = false;
        }
        else
        {
            this.CampoContrasena.setText(ContrasenaTemp);
            MostrandoContrasena = true;
        }
    }//GEN-LAST:event_BotonMostrarContrasenaActionPerformed

    // Método para cuando se hace click en BotonRegistrarse
    private void BotonRegistrarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRegistrarseActionPerformed
        // Verifica si todos los campos están llenos
        String NombreUsuario, Contrasena, Nombre, AP, AM, Direccion, Telefono;
        int x, Mayor;
        Mayor = 0;
        Boolean Existente;
        Existente = false;
        NombreUsuario = this.CampoNombreUsuario.getText();
        Contrasena = this.CampoContrasena.getText();
        Nombre = this.CampoNombre.getText();
        AP = this.CampoApellidoPaterno.getText();
        AM = this.CampoApellidoMaterno.getText();
        Direccion = this.CampoDireccion.getText();
        Telefono = this.CampoTelefono.getText();
        if(NombreUsuario.equals("Nombre de Usuario") || NombreUsuario.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
        }
        else
        {
            if(Contrasena.equals("Contraseña") || Contrasena.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
            }
            else
            {
                if(Nombre.equals("Nombre(s)") || Nombre.equals(""))
                {
                    JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
                }
                else
                {
                    if(AP.equals("Apellido Paterno") || AP.equals(""))
                    {
                        JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
                    }
                    else
                    {
                        if(AM.equals("Apellido Materno") || AM.equals(""))
                        {
                            JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
                        }
                        else
                        {
                            if(Direccion.equals("Dirección") || Direccion.equals(""))
                            {
                                JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
                            }
                            else
                            {
                                if(Telefono.equals("Teléfono") || Telefono.equals(""))
                                {
                                    JOptionPane.showMessageDialog(null, "Faltan campos por llenar");
                                }
                                else
                                {
                                    if(RegistrosVentana.getTamanoUsuarios() > 0)
                                    {
                                        for(x = 0; x < RegistrosVentana.getTamanoUsuarios(); x++)
                                        {
                                            if(NombreUsuario.equals(RegistrosVentana.getUsuario(x).getUsername()))
                                            {
                                                Existente = true;
                                            }
                                            if(Mayor < Integer.parseInt(RegistrosVentana.getUsuario(x).getID()))
                                            {
                                                Mayor = Integer.parseInt(RegistrosVentana.getUsuario(x).getID());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Existente = true;
                                        Mayor = 0;
                                    }
                                    if(Existente)
                                    {
                                        JOptionPane.showMessageDialog(null, "Nombre de Usuario ya está registrado");
                                    }
                                    else
                                    {
                                        Usuario UsuarioARegistrar;
                                        UsuarioARegistrar = new Usuario();
                                        UsuarioARegistrar.setID(Integer.toString(Mayor + 1));
                                        UsuarioARegistrar.setUsername(NombreUsuario);
                                        UsuarioARegistrar.setContrasena(Hashing.Hash(ContrasenaTemp));
                                        UsuarioARegistrar.setRol("Cliente");
                                        UsuarioARegistrar.setNombre(Nombre);
                                        UsuarioARegistrar.setApellidoPaterno(AP);
                                        UsuarioARegistrar.setApellidoMaterno(AM);
                                        UsuarioARegistrar.setDireccion(Direccion);
                                        UsuarioARegistrar.setTelefono(Telefono);
                                        RegistrosVentana.InsertarUsuarios(UsuarioARegistrar);
                                        JOptionPane.showMessageDialog(null, "Se ha registrado nueva cuenta " +
                                                NombreUsuario + " con éxito");
                                        Login LoginVentana = new Login(TamanoVentana, RegistrosVentana);
                                        LoginVentana.setVisible(true);
                                        dispose();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_BotonRegistrarseActionPerformed

    // Método para cuando se hace click en BotonReestablecer
    private void BotonReestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonReestablecerActionPerformed
        // Color para indicar que aún no se ha llenado
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Elimina o setea a predeterminado todos los contenidos de ambos campos
        this.CampoNombreUsuario.setText("Nombre de Usuario");
        this.CampoContrasena.setText("Contraseña");
        this.CampoNombre.setText("Nombre(s)");
        this.CampoApellidoPaterno.setText("Apellido Paterno");
        this.CampoApellidoMaterno.setText("Apellido Materno");
        this.CampoDireccion.setText("Dirección");
        this.CampoTelefono.setText("Teléfono");
        // Asigna color predeterminado
        this.CampoNombreUsuario.setForeground(ColorNoEscrito);
        this.CampoContrasena.setForeground(ColorNoEscrito);
        this.CampoNombre.setForeground(ColorNoEscrito);
        this.CampoApellidoPaterno.setForeground(ColorNoEscrito);
        this.CampoApellidoMaterno.setForeground(ColorNoEscrito);
        this.CampoDireccion.setForeground(ColorNoEscrito);
        this.CampoTelefono.setForeground(ColorNoEscrito);
        ContrasenaTemp = "";
    }//GEN-LAST:event_BotonReestablecerActionPerformed

    // Método para cuando se está escribiendo en CampoContrasena
    private void CampoContrasenaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CampoContrasenaKeyTyped
        // Obtiene contenido actual de Contraseña
        String Contenido = this.CampoContrasena.getText();
        String ContenidoReemplazar;
        ContenidoReemplazar = "";
        if(Contenido.equals(""))
        {
            ContrasenaTemp = "";
        }
        if(evt.getKeyChar() >= ' ' && evt.getKeyChar() <= '■')
        {
            ContrasenaTemp += evt.getKeyChar();
        }
        else
        {
            if(evt.getKeyChar() == '\b')
            {
                ContrasenaTemp = ContrasenaTemp.substring(0, ContrasenaTemp.length() - 1);
            }
        }
        
        // Contador
        int x;
        for(x = 0; x < Contenido.length(); x++)
        {
            ContenidoReemplazar += "•";
        }
        if(!Contenido.equals("Contraseña"))
        {
            this.CampoContrasena.setText(ContenidoReemplazar);
        }
    }//GEN-LAST:event_CampoContrasenaKeyTyped

    // Método para cuando CampoContrasena gana enfoque
    private void CampoContrasenaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoContrasenaFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoContrasena.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoContrasena.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Contraseña") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoContrasena.setText("");
            this.CampoContrasena.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoContrasena.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoContrasenaFocusGained

    // Método para cuando se desenfoca de CampoContrasena
    private void CampoContrasenaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoContrasenaFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoContrasena.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoContrasena.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Contraseña"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoContrasena.setText("Contraseña");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoContrasena.setForeground(ColorNoEscrito);
                }
            }
        }
        CampoContrasenaCubrirContrasena();
    }//GEN-LAST:event_CampoContrasenaFocusLost

    // Método para cuando se presiona CampoContrasena con el mouse
    private void CampoContrasenaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoContrasenaMousePressed
        // Obtener contenido
        String Contenido = this.CampoContrasena.getText();
        Color ColorActual = this.CampoContrasena.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Contraseña"))
        {
            // Elimina contenido
            this.CampoContrasena.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoContrasena.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoContrasenaMousePressed

    // Método para cuando se presiona CampoUsuario con el mouse
    private void CampoNombreUsuarioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoNombreUsuarioMousePressed
        // Obtener contenido
        String Contenido = this.CampoNombreUsuario.getText();
        Color ColorActual = this.CampoNombreUsuario.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Nombre de Usuario"))
        {
            // Elimina contenido
            this.CampoNombreUsuario.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoNombreUsuario.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoNombreUsuarioMousePressed

    // Método para cuando se enfoca en CampoNombreUsuario
    private void CampoNombreUsuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoNombreUsuarioFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoNombreUsuario.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoNombreUsuario.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Nombre de Usuario") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoNombreUsuario.setText("");
            this.CampoNombreUsuario.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoNombreUsuario.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoNombreUsuarioFocusGained

    // Método para cuando se desenfoca de CampoNombreUsuario
    private void CampoNombreUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoNombreUsuarioFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoNombreUsuario.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoNombreUsuario.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Nombre de Usuario"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoNombreUsuario.setText("Nombre de Usuario");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoNombreUsuario.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoNombreUsuarioFocusLost

    // Método para cuando se presiona CampoNombre con el mouse
    private void CampoNombreMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoNombreMousePressed
        // Obtener contenido
        String Contenido = this.CampoNombre.getText();
        Color ColorActual = this.CampoNombre.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Nombre(s)"))
        {
            // Elimina contenido
            this.CampoNombre.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoNombre.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoNombreMousePressed

    // Método para cuando se enfoca en CampoNombre
    private void CampoNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoNombreFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoNombre.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoNombre.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Nombre(s)") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoNombre.setText("");
            this.CampoNombre.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoNombre.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoNombreFocusGained

    // Método para cuando se desenfoca de CampoNombre
    private void CampoNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoNombreFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoNombre.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoNombre.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Nombre(s)"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoNombre.setText("Nombre(s)");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoNombre.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoNombreFocusLost

    // Método para cuando se presiona CampoApellidoPaterno con el mouse
    private void CampoApellidoPaternoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoApellidoPaternoMousePressed
        // Obtener contenido
        String Contenido = this.CampoApellidoPaterno.getText();
        Color ColorActual = this.CampoApellidoPaterno.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Apellido Paterno"))
        {
            // Elimina contenido
            this.CampoApellidoPaterno.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoApellidoPaterno.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoApellidoPaternoMousePressed

    // Método para cuando se enfoca en CampoApellidoPaterno
    private void CampoApellidoPaternoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoApellidoPaternoFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoApellidoPaterno.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoApellidoPaterno.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Apellido Paterno") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoApellidoPaterno.setText("");
            this.CampoApellidoPaterno.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoApellidoPaterno.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoApellidoPaternoFocusGained

    // Método para cuando se desenfoca de CampoApellidoPaterno
    private void CampoApellidoPaternoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoApellidoPaternoFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoApellidoPaterno.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoApellidoPaterno.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Apellido Paterno"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoApellidoPaterno.setText("Apellido Paterno");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoApellidoPaterno.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoApellidoPaternoFocusLost

    // Método para cuando se presiona en CampoApellidoMaterno con el mouse
    private void CampoApellidoMaternoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoApellidoMaternoMousePressed
        // Obtener contenido
        String Contenido = this.CampoApellidoMaterno.getText();
        Color ColorActual = this.CampoApellidoMaterno.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Apellido Materno"))
        {
            // Elimina contenido
            this.CampoApellidoMaterno.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoApellidoMaterno.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoApellidoMaternoMousePressed

    // Método para cuando se enfoca en ApellidoMaterno
    private void CampoApellidoMaternoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoApellidoMaternoFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoApellidoMaterno.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoApellidoMaterno.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Apellido Materno") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoApellidoMaterno.setText("");
            this.CampoApellidoMaterno.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoApellidoMaterno.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoApellidoMaternoFocusGained

    // Método para cuando se desenfoca de CampoApellidoMaterno
    private void CampoApellidoMaternoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoApellidoMaternoFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoApellidoMaterno.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoApellidoMaterno.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Apellido Materno"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoApellidoMaterno.setText("Apellido Materno");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoApellidoMaterno.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoApellidoMaternoFocusLost

    // Método para cuando se presiona en CampoDireccion con el mouse
    private void CampoDireccionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoDireccionMousePressed
        // Obtener contenido
        String Contenido = this.CampoDireccion.getText();
        Color ColorActual = this.CampoDireccion.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Dirección"))
        {
            // Elimina contenido
            this.CampoDireccion.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoDireccion.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoDireccionMousePressed

    // Método para cuando se enfoca en CampoDireccion
    private void CampoDireccionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoDireccionFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoDireccion.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoDireccion.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Dirección") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoDireccion.setText("");
            this.CampoDireccion.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoDireccion.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoDireccionFocusGained

    // Método para cuando se desenfoca de CampoDireccion
    private void CampoDireccionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoDireccionFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoDireccion.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoDireccion.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Dirección"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoDireccion.setText("Dirección");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoDireccion.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoDireccionFocusLost

    // Método para cuando se presiona en CampoTelefono con el mouse
    private void CampoTelefonoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CampoTelefonoMousePressed
        // Obtener contenido
        String Contenido = this.CampoTelefono.getText();
        Color ColorActual = this.CampoTelefono.getForeground();
        Color ColorEscrito = new Color(51, 51, 51);
        // Verifica si no tiene nada seteado aún
        if(Contenido.equals("Teléfono"))
        {
            // Elimina contenido
            this.CampoTelefono.setText("");
        }
        if(ColorActual != ColorEscrito)
        {
            this.CampoTelefono.setForeground(ColorEscrito);
        }
    }//GEN-LAST:event_CampoTelefonoMousePressed

    // Método para cuando se enfoca en CampoTelefono
    private void CampoTelefonoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoTelefonoFocusGained
        // Obtiene contenido de campo
        String Contenido = this.CampoTelefono.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoTelefono.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(Contenido.equals("Teléfono") && 
                (ColorActual == ColorNoEscrito))
        {
            // Limpiamos contenido
            this.CampoTelefono.setText("");
            this.CampoTelefono.setForeground(ColorEscribir);
        }
        else
        {
            this.CampoTelefono.setForeground(ColorEscribir);
        }
    }//GEN-LAST:event_CampoTelefonoFocusGained

    // Método para cuando se desenfoca de CampoTelefono
    private void CampoTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CampoTelefonoFocusLost
        // Obtiene contenido de campo
        String Contenido = this.CampoTelefono.getText();
        // Obtiene color de campo
        Color ColorActual = this.CampoTelefono.getForeground();
        // Color cuando no se ha escrito nada
        Color ColorNoEscrito = new Color(102, 102, 102);
        // Color cuando se va a escribir algo
        Color ColorEscribir = new Color(51, 51, 51);
        // Verifica contenido y color de campo son los predeterminados
        if(!Contenido.equals("Teléfono"))
        {  
            if(Contenido.equals(""))
            {
                this.CampoTelefono.setText("Teléfono");
                if(ColorActual != ColorNoEscrito)
                {
                    this.CampoTelefono.setForeground(ColorNoEscrito);
                }
            }
        }
    }//GEN-LAST:event_CampoTelefonoFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearCuenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ventana TamanoVentana;
                TamanoVentana = new Ventana();
                Registro RegistrosVentana;
                RegistrosVentana = new Registro();
                CrearCuenta dialog = new CrearCuenta(new javax.swing.JFrame(), true,
                TamanoVentana, RegistrosVentana);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonCerrar;
    private javax.swing.JButton BotonMostrarContrasena;
    private javax.swing.JButton BotonReestablecer;
    private javax.swing.JButton BotonRegistrarse;
    private javax.swing.JTextField CampoApellidoMaterno;
    private javax.swing.JTextField CampoApellidoPaterno;
    private javax.swing.JTextField CampoContrasena;
    private javax.swing.JTextField CampoDireccion;
    private javax.swing.JTextField CampoNombre;
    private javax.swing.JTextField CampoNombreUsuario;
    private javax.swing.JTextField CampoTelefono;
    private javax.swing.JPanel PanelFondo;
    private javax.swing.JSeparator SeparadorApellidoMaterno;
    private javax.swing.JSeparator SeparadorApellidoPaterno;
    private javax.swing.JSeparator SeparadorContrasena;
    private javax.swing.JSeparator SeparadorDireccion;
    private javax.swing.JSeparator SeparadorNombre;
    private javax.swing.JSeparator SeparadorNombreUsuario;
    private javax.swing.JSeparator SeparadorTelefono;
    private javax.swing.JLabel TextoApellidoMaterno;
    private javax.swing.JLabel TextoApellidoPaterno;
    private javax.swing.JLabel TextoContrasena;
    private javax.swing.JLabel TextoCrearCuentaNueva;
    private javax.swing.JLabel TextoDireccion;
    private javax.swing.JLabel TextoNombre;
    private javax.swing.JLabel TextoNombreUsuario;
    private javax.swing.JLabel TextoTelefono;
    // End of variables declaration//GEN-END:variables
}
